"use strict";(self.webpackChunkhb=self.webpackChunkhb||[]).push([[290],{8559:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>e,data:()=>c});var t=a(641);const p={},e=(0,a(6262).A)(p,[["render",function(n,s){return(0,t.uX)(),(0,t.CE)("div",null,s[0]||(s[0]=[(0,t.Fv)('<h1 id="netcore-简单的公众号扫码回复零时登录功能" tabindex="-1"><a class="header-anchor" href="#netcore-简单的公众号扫码回复零时登录功能"><span>NetCore 简单的公众号扫码回复零时登录功能</span></a></h1><h2 id="流程" tabindex="-1"><a class="header-anchor" href="#流程"><span>流程</span></a></h2><blockquote><p>1.首先去微信公众号后台,配置接口地址 如下</p></blockquote><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code><span class="line">        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span></span>\n<span class="line">        <span class="token doc-comment comment">/// 微信公众号配置 验证token</span></span>\n<span class="line">        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span></span>\n<span class="line">        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>echostr<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span></span>\n<span class="line">        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span></span>\n<span class="line">        <span class="token punctuation">[</span>AllowAnonymous<span class="token punctuation">]</span></span>\n<span class="line">        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;Token&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span></span>\n<span class="line">        <span class="token keyword">public</span> <span class="token return-type class-name">IActionResult</span> <span class="token function">Token</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> echostr<span class="token punctuation">)</span></span>\n<span class="line">        <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token keyword">return</span> <span class="token function">Content</span><span class="token punctuation">(</span>echostr<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">            <span class="token comment">//return Ok();</span></span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span></span>\n<span class="line">        <span class="token doc-comment comment">/// 微信公众号配置 接收 微信 xml body内容</span></span>\n<span class="line">        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span></span>\n<span class="line">        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>signature<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span></span>\n<span class="line">        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>timestamp<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span></span>\n<span class="line">        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>nonce<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span></span>\n<span class="line">        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>openid<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span></span>\n<span class="line">        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span></span>\n<span class="line">        <span class="token punctuation">[</span>AllowAnonymous<span class="token punctuation">]</span></span>\n<span class="line">        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpPost</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;Token&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span></span>\n<span class="line">        <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>IActionResult<span class="token punctuation">&gt;</span></span> <span class="token function">Token</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> signature<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> timestamp<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> nonce<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> openid<span class="token punctuation">)</span></span>\n<span class="line">        <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token keyword">try</span></span>\n<span class="line">            <span class="token punctuation">{</span></span>\n<span class="line">                <span class="token keyword">using</span> <span class="token class-name">StreamReader<span class="token punctuation">?</span></span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StreamReader</span><span class="token punctuation">(</span>Request<span class="token punctuation">.</span>Body<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">                <span class="token class-name"><span class="token keyword">var</span></span> xmlStr <span class="token operator">=</span> <span class="token keyword">await</span> reader<span class="token punctuation">.</span><span class="token function">ReadToEndAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">                <span class="token comment">// Log the incoming request if needed</span></span>\n<span class="line">                <span class="token comment">// Logger.Info(LoggerType.Login, $&quot;WeChat Request: {xmlStr}&quot;, null, null);</span></span>\n<span class="line"></span>\n<span class="line">                <span class="token class-name"><span class="token keyword">var</span></span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">WeChatRequest</span></span>\n<span class="line">                <span class="token punctuation">{</span></span>\n<span class="line">                    XmlData <span class="token operator">=</span> xmlStr<span class="token punctuation">,</span></span>\n<span class="line">                    Signature <span class="token operator">=</span> signature<span class="token punctuation">,</span></span>\n<span class="line">                    Timestamp <span class="token operator">=</span> timestamp<span class="token punctuation">,</span></span>\n<span class="line">                    Nonce <span class="token operator">=</span> nonce</span>\n<span class="line">                <span class="token punctuation">}</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">                <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">await</span> _messageHandle<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">                <span class="token keyword">return</span> <span class="token function">Content</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token string">&quot;text/xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">            <span class="token punctuation">}</span></span>\n<span class="line">            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span></span>\n<span class="line">            <span class="token punctuation">{</span></span>\n<span class="line">                <span class="token comment">// Log the error</span></span>\n<span class="line">                Logger<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>LoggerType<span class="token punctuation">.</span>Login<span class="token punctuation">,</span> <span class="token interpolation-string"><span class="token string">$&quot;WeChat API Error: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">ex<span class="token punctuation">.</span>Message</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">,</span> ex<span class="token punctuation">.</span>StackTrace<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">                <span class="token keyword">return</span> <span class="token function">Content</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">            <span class="token punctuation">}</span></span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',4)]))}]]),c=JSON.parse('{"path":"/Net/Wechat.html","title":"NetCore 简单的公众号扫码回复零时登录功能","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"流程","slug":"流程","link":"#流程","children":[]}],"git":{"updatedTime":1753690401000,"contributors":[{"name":"TuCoke","username":"TuCoke","email":"57646826+TuCoke@users.noreply.github.com","commits":1,"url":"https://github.com/TuCoke"}],"changelog":[{"hash":"f63660f4687c9b9a1b12c8f0eb03b9b3a83e5767","time":1753690401000,"email":"57646826+TuCoke@users.noreply.github.com","author":"subman","message":"Create Wechat.md"}]},"filePathRelative":"Net/Wechat.md"}')}}]);